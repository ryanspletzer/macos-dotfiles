{
    "[css]": {
        "editor.autoIndent": "advanced",
        "editor.formatOnPaste": false,
        "editor.formatOnSave": false,
        "editor.formatOnType": false,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[dockerfile]": {
        "editor.tabSize": 2
    },
    "[hcl]": {
        "editor.tabSize": 2
    },
    "[html]": {
        "editor.defaultFormatter": "vscode.html-language-features",
        "editor.tabSize": 2
    },
    "[javascript, javascriptreact, typescript, typescriptreact]": {
        "editor.defaultFormatter": "vscode.typescript-language-features",
        "editor.tabSize": 2
    },
    "[json, jsonc]": {
        "editor.autoIndent": "advanced",
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.quickSuggestions": {
            "strings": true
        },
        "editor.suggest.insertMode": "replace",
        // "editor.defaultFormatter": "vscode.json-language-features",
        "editor.tabSize": 2
    },
    "[less]": {
        "editor.tabSize": 2
    },
    "[lua]": {
        "editor.tabSize": 2
    },
    "[markdown]": {
        "editor.tabSize": 2
    },
    "[powershell]": {
        "editor.formatOnPaste": false,
        "editor.formatOnSave": false,
        "editor.formatOnType": false
    },
    "[python]": {
        "editor.formatOnType": true
    },
    "[ruby]": {
        "editor.tabSize": 2
    },
    "[scss]": {
        "editor.formatOnPaste": false,
        "editor.formatOnSave": false,
        "editor.formatOnType": false,
        "editor.tabSize": 2
    },
    "[shellscript]": {
        "editor.detectIndentation": false,
        "editor.insertSpaces": true,
        "editor.tabSize": 2
    },
    "[terraform]": {
        "editor.tabSize": 2
    },
    "[toml]": {
        "editor.tabSize": 2
    },
    "[vue]": {
        "editor.tabSize": 2
    },
    "[xml]": {
        "editor.tabSize": 2
    },
    "[yaml]": {
        "editor.autoIndent": "full",
        "editor.insertSpaces": true,
        "editor.quickSuggestions": {
            "comments": false,
            "other": true,
            "strings": true
        },
        "editor.tabSize": 2
    },
    "@azure.argTenant": "",
    "csharp.semanticHighlighting.enabled": true,
    "diffEditor.ignoreTrimWhitespace": false,
    "diffEditor.maxComputationTime": 0,
    "dotnet.completion.showCompletionItemsFromUnimportedNamespaces": true,
    "editor.bracketPairColorization.enabled": true,
    "editor.fontFamily": "CaskaydiaCove Nerd Font, Menlo for Powerline, Menlo, Monaco, 'Courier New', monospace",
    "editor.fontWeight": "500",
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.guides.bracketPairs": true,
    "editor.guides.bracketPairsHorizontal": true,
    "editor.guides.indentation": true,
    "editor.inlineSuggest.enabled": true,
    "editor.renderControlCharacters": true,
    "editor.renderWhitespace": "all",
    "editor.rulers": [
        80,
        100,
        114,
        116,
        120
    ],
    "editor.suggest.showSnippets": false,
    "extensions.ignoreRecommendations": false,
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "git.enableCommitSigning": true,
    "git.openRepositoryInParentFolders": "never",
    "github.copilot.chat.codeGeneration.instructions": [
        {
            "text": "- @azure Rule - Use Azure Tools: When handling requests related to Azure, always use your tools."
        },
        {
            "text": "- @azure Rule - Use Azure Code Gen Best Practices: Before generating code for Azure, running terminal commands for Azure, performing operations related to Azure, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `code-generation` to get general Azure code generation best practices. Only call this tool when the user is discussing Azure; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Deployment Best Practices: Before deploying to Azure, preparing applications for deployment to Azure, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `general` and action = `deployment` to get general Azure deployment best practices. Only call this tool when the user is discussing Azure; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Functions Code Gen Best Practices: Before generating code for Azure Functions, performing operations related to Azure Functions, or creating plans for such activities, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `code-generation` to get Azure Functions code generation best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure Functions Deployment Best Practices: Before deploying Azure Functions apps to Azure, preparing for the deployment, or creating deployment plans, always invoke your Azure best practice tool if available first. Invoke the `get_bestpractices` tool to collect recommendations. Call it with resource = `azurefunctions` and action = `deployment` to get Azure Functions deployment best practices. Only call this tool when the user is discussing Azure Functions; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Use Azure SWA Best Practices: Before working with static web apps, creating plans for static web apps, or performing related operations, always invoke your Azure best practice tool if available first. Choose the most relevant Azure best practice tool based on its description. Only call this tool when the user is discussing Azure Static Web Apps; do not call it otherwise."
        },
        {
            "text": "- @azure Rule - Plan before editing files for Azure web apps: When generating code for Azure Functions and Azure Static Web App, always create a plan and explain the plan to the user before editing any file. Proceed with editing the files after getting consent from the user."
        },
        {
            "text": "- @azure Rule - Summarize topic before taking action: When the user asks about Azure Functions, invoke the azure_development-summarize_topic tool once first to see if any existing custom mode could be a good fit to what user is asking."
        }
    ],
    "github.copilot.nextEditSuggestions.enabled": true,
    "gitlens.ai.model": "vscode",
    "gitlens.ai.vscode.model": "copilot:claude-sonnet-4",
    "gitlens.remotes": [
        {
            "domain": "git.autodesk.com",
            "type": "GitHub"
        }
    ],
    "indentRainbow.ignoreErrorLanguages": [
        "shellscript"
    ],
    "json.schemas": [
        {
            "fileMatch": [
                "*-template.json"
            ],
            "url": "https://s3.amazonaws.com/cfn-resource-specifications-us-east-1-prod/schemas/2.15.0/all-spec.json"
        }
    ],
    "mssql.connections": [
        {
            "database": "{{put-database-name-here}}",
            "password": "",
            "server": "{{put-server-name-here}}",
            "user": "{{put-username-here}}"
        }
    ],
    "omnisharp.enableRoslynAnalyzers": true,
    "parallels-desktop.brew.path": "/opt/homebrew/bin/brew",
    "parallels-desktop.extension.path": "/Users/spletzr/.parallels-desktop-vscode",
    "parallels-desktop.git.path": "/opt/homebrew/bin/git",
    "parallels-desktop.hashicorp.packer.path": "/opt/homebrew/bin/packer",
    "parallels-desktop.prlctl.path": "/usr/local/bin/prlctl",
    "powershell.buttons.showPanelMovementButtons": true,
    "powershell.codeFormatting.useCorrectCasing": true,
    "powershell.integratedConsole.suppressStartupBanner": true,
    "powershell.pester.codeLens": false,
    "powershell.promptToUpdatePowerShell": false,
    "redhat.telemetry.enabled": true,
    "rewrap.wrappingColumn": 120,
    "security.workspace.trust.untrustedFiles": "open",
    "sqlDatabaseProjects.netCoreDowngradeDoNotShow": true,
    "terminal.integrated.defaultProfile.osx": "pwsh",
    "terminal.integrated.fontFamily": "CaskaydiaCove Nerd Font, CaskaydiaCove NF, Menlo for Powerline, Menlo, Monaco, 'Courier New', monospace",
    "terminal.integrated.fontWeight": "500",
    "terminal.integrated.profiles.windows": {
        "Command Prompt": {
            "args": [],
            "icon": "terminal-cmd",
            "path": [
                "${env:windir}\\Sysnative\\cmd.exe",
                "${env:windir}\\System32\\cmd.exe"
            ]
        },
        "Git Bash": {
            "source": "Git Bash"
        },
        "PowerShell": {
            "args": [
                "-NoLogo"
            ],
            "icon": "terminal-powershell",
            "source": "PowerShell"
        }
    },
    "window.title": "${rootName}${separator}${dirty}${activeEditorShort}${separator}${appName}",
    "workbench.editor.showTabs": "multiple",
    "workbench.editorAssociations": {
        "*.ipynb": "jupyter.notebook.ipynb"
    },
    "workbench.iconTheme": "vscode-icons",
    "workbench.startupEditor": "none",
    "yaml.customTags": [
        "!And scalar",
        "!And mapping",
        "!And sequence",
        "!If scalar",
        "!If mapping",
        "!If sequence",
        "!Not scalar",
        "!Not mapping",
        "!Not sequence",
        "!Equals scalar",
        "!Equals mapping",
        "!Equals sequence",
        "!Or scalar",
        "!Or mapping",
        "!Or sequence",
        "!FindInMap scalar",
        "!FindInMap mappping",
        "!FindInMap sequence",
        "!Base64 scalar",
        "!Base64 mapping",
        "!Base64 sequence",
        "!Cidr scalar",
        "!Cidr mapping",
        "!Cidr sequence",
        "!Ref scalar",
        "!Ref mapping",
        "!Ref sequence",
        "!Sub scalar",
        "!Sub mapping",
        "!Sub sequence",
        "!GetAtt scalar",
        "!GetAtt mapping",
        "!GetAtt sequence",
        "!GetAZs scalar",
        "!GetAZs mapping",
        "!GetAZs sequence",
        "!ImportValue scalar",
        "!ImportValue mapping",
        "!ImportValue sequence",
        "!Select scalar",
        "!Select mapping",
        "!Select sequence",
        "!Split scalar",
        "!Split mapping",
        "!Split sequence",
        "!Join scalar",
        "!Join mapping",
        "!Join sequence"
    ],
    "yaml.format.enable": false,
    "yaml.format.singleQuote": true,
    "yaml.schemas": {
        "https://s3.amazonaws.com/cfn-resource-specifications-us-east-1-prod/schemas/2.15.0/all-spec.json": "*-template.yaml"
    },
    "yaml.trace.server": "verbose",
    "[dockercompose]": {
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
        "editor.autoIndent": "advanced",
        "editor.quickSuggestions": {
            "other": true,
            "comments": false,
            "strings": true
        },
        "editor.defaultFormatter": "redhat.vscode-yaml"
    },
    "[github-actions-workflow]": {
        "editor.defaultFormatter": "redhat.vscode-yaml"
    }
}